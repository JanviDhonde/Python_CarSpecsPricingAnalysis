# -*- coding: utf-8 -*-
"""Car Specs & Pricing Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12ca9QXMZLqYCma7Nt-yvSC1Be2iQofA0
"""

import pandas as pd
cars_data = pd.read_csv('Cars_data.csv')

"""***Data Understanding and Initial Exploration***"""

cars_data.shape

# Display basic information about the dataset

cars_data.info()

# Summary statistics of numerical columns

cars_data.describe()

# Checking for missing values

cars_data.isnull().sum()

# To display first few rows

cars_data.head(5)

"""***Data Cleaning***"""

# Replace null values in 'Market Category' with 'Not Specified'

cars_data['Market Category'].fillna('Not Specified', inplace = True)

# Handling missing values

cars_data.dropna(inplace = True)

# Checking for duplicates

cars_data.drop_duplicates(inplace = True)

# Convert 'Year' to a categorical variable if needed

cars_data['Year'] = cars_data['Year'].astype(str)

# Checking for missing values after cleaning

cars_data.isnull().sum()

# To drop Irrevalent column

cars_data.drop(columns = ['Engine Fuel Type'], inplace = True)

# To Verify changes

cars_data.info()

cars_data.shape

"""***Data Transformation***"""

# Creating a new feature 'Age' of the car

cars_data['Age'] = 2024 - cars_data['Year'].astype(int)

# Categorizing 'Engine HP' into bins

bins = [0,200,400,600]
labels = ['Low HP','Medium HP','High HP']
cars_data['HP Category'] = pd.cut(cars_data['Engine HP'], bins = bins, labels = labels)

# verify Transformation
cars_data.head(5)

"""***Exploratory Data Analysis (EDA)***"""

import matplotlib.pyplot as plt
import seaborn as sns

# Checking Outliners

plt.figure()
sns.boxplot(x=cars_data['Engine HP'])
plt.show()

# Checking outliners

plt.figure()
sns.boxplot(x=cars_data['MSRP'])
plt.show()

"""***Removing outliers***"""

# Creating a new list for all Numberic columns

numberic_column = cars_data.select_dtypes(include = ['int64','float64']).columns.tolist()
numberic_column

# Using IQR to find outliners

Q1 = cars_data[numberic_column].quantile(0.25)
Q3 = cars_data[numberic_column].quantile(0.75)
IQR = Q3 - Q1
lower_limit = Q1 - 1.5 * IQR
upper_limit = Q3 + 1.5 * IQR

IQR

# giving new variable to data with no outliners

cars_data2 = cars_data[~((cars_data[numberic_column]< lower_limit) | (cars_data[numberic_column]> upper_limit)).any(axis=1)]

cars_data2.shape,cars_data.shape

# Frequency distribution of Engine HP
sns.set_style('whitegrid')
plt.figure()
sns.histplot(cars_data2['Engine HP'], kde = True, bins = 40)
plt.title('Distribution of Engine HP')
plt.xlabel('Engine HP')
plt.ylabel('Frequency')

# Correlation between 'HP' and 'Price'

plt.figure()
sns.set(style="whitegrid")
sns.scatterplot(x = 'Engine HP', y = 'MSRP', data = cars_data2, alpha = 0.6)
sns.regplot(x='Engine HP', y='MSRP', data=cars_data2, scatter=False, color='red', line_kws={"lw":1})
plt.title('Engine HP vs MSRP')

# Count plot of 'Vehicle Size'

plt.figure()
xa = sns.countplot(x = 'Vehicle Size', data = cars_data2, palette='Set2' )

for bars in xa.containers:
    xa.bar_label(bars)

# countplot on transmission

fcd = cars_data2[cars_data2['Transmission Type'] != 'UNKNOWN']
plt.figure()
ax = sns.countplot(x = 'Transmission Type', data = fcd, palette='Set2')

for bars in ax.containers:
    ax.bar_label(bars)

# Makers by number of cars
make_count = cars_data2['Make'].value_counts()
plt.figure(figsize=(12,6))
bars = plt.bar(make_count.index, make_count.values, color=sns.color_palette('viridis', len(make_count)))
plt.xticks(rotation=90)
plt.title('Makers by Number of cars')
plt.show()

# Box plot of 'MSRP' by 'Vehicle Style'

plt.figure(figsize=(10,6))
mean_price = cars_data2.groupby(['Engine Cylinders'], as_index = False)['MSRP'].mean().sort_values(by = 'MSRP', ascending = False)
sns.barplot(x = mean_price['Engine Cylinders'],y = mean_price['MSRP'], palette='viridis')
plt.title('MSRP by Engine Cylinders')
plt.show()

# Car maker by Average highway MPG

avg_mpg_by_make= cars_data2.groupby('Make')['highway MPG'].mean().sort_values(ascending = False)
top_10_mpg_by_make = avg_mpg_by_make.head(10)
plt.figure(figsize = (10,6))
sns.barplot(x = top_10_mpg_by_make, y = top_10_mpg_by_make.index, palette = 'coolwarm')
plt.title('Top 10 maker by AVG MPG')
plt.ylabel('Car Maker')
plt.xlabel('Average Highway MPG')
plt.show()

# Car Makers by average City MPG

avg_mpg_by_make= cars_data2.groupby('Make')['city mpg'].mean().sort_values(ascending = False)
top_10_mpg_by_make = avg_mpg_by_make.head(10)
plt.figure(figsize = (10,6))
sns.barplot(x = top_10_mpg_by_make, y = top_10_mpg_by_make.index, palette = 'coolwarm')
plt.title('Top 10 maker by AVG City MPG')
plt.ylabel('Car Maker')
plt.xlabel('Average city MPG')
plt.show()

# Correlation Heatmap
plt.figure(figsize=(12, 8))
# Select only numeric features for correlation calculation
numeric_data = cars_data2.select_dtypes(include=['number'])
correlation_matrix = numeric_data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()